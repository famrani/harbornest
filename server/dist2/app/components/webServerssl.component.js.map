{"version":3,"sources":["../src/app/components/webServerssl.component.ts"],"names":[],"mappings":"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","file":"webServerssl.component.js","sourcesContent":["import express, { Request, Response, NextFunction } from 'express';\nimport path from 'path';\nimport fs from 'fs';\nimport bodyParser from 'body-parser';\nimport http from 'http';\nimport https from 'https';\nimport { UtilsService } from '../services/utils.service';\nimport { StripeService } from '../services/stripeAdn';\n\nexport class WebServerComponent {\n    private app = express();\n    private appHttp = express();\n    private port: number;\n    private portHttp: number;\n    private router = express.Router();\n\n    constructor(private utilsSvc: UtilsService, private stripeSvc: StripeService) {}\n\n    async initWebServer(): Promise<void> {\n        this.port = Number(this.utilsSvc.serverPort);\n        this.portHttp = this.port + 1;\n\n        // Apply middlewares\n        this.setupMiddlewares();\n\n        // Setup routes\n        this.router = express.Router();\n        this.setRoutes();\n        this.app.use('/', this.router);\n\n        // Serve static files\n        const temp = process.cwd();\n        this.app.use(express.static(path.join(temp, './dist')));\n        this.app.use(express.static(path.join(temp, './dist2')));\n\n        // Catch-all for SPA routing (must be after static!)\n        this.app.get('/*', (req: Request, res: Response) => {\n            res.sendFile(path.join(temp, './dist/index.html'));\n        });\n\n        // HTTP -> HTTPS redirect\n        this.appHttp.use((req: Request, res: Response) => {\n            const host = req.headers.host?.replace(/:\\d+$/, `:${this.port}`) || '';\n            res.redirect(301, `https://${host}${req.url}`);\n        });\n\n        // SSL options\n        const sslOptions = {\n            key: fs.readFileSync('./sslKeys/kamli.net/_.kamli.net.key'),\n            cert: fs.readFileSync('./sslKeys/kamli.net/_.kamli.net.crt'),\n            ca: [fs.readFileSync('./sslKeys/kamli.net/GandiCert.pem')],\n        };\n\n        // Start HTTPS server\n        https.createServer(sslOptions, this.app).listen(this.port, () => {\n            console.log(`✅ HTTPS server running on port ${this.port}`);\n        });\n\n        // Start HTTP server (redirects)\n        http.createServer(this.appHttp).listen(this.portHttp, () => {\n            console.log(`✅ HTTP redirect server running on port ${this.portHttp}`);\n        });\n    }\n\n    private setupMiddlewares(): void {\n        // CORS setup\n        this.app.use((req: Request, res: Response, next: NextFunction) => {\n            res.setHeader('Access-Control-Allow-Origin', '*');\n            res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n            res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type');\n            res.setHeader('Access-Control-Allow-Credentials', 'true');\n            next();\n        });\n\n        // Body parsers\n        this.app.use(bodyParser.json());\n        this.app.use(bodyParser.urlencoded({ extended: true }));\n    }\n\n    private setRoutes(): void {\n        this.utilsSvc.setRoutes(this.router);\n    }\n}\n"]}