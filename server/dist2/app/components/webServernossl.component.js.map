{"version":3,"sources":["../src/app/components/webServernossl.component.ts"],"names":[],"mappings":"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","file":"webServernossl.component.js","sourcesContent":["import express, { Request, Response } from 'express';\nimport path from 'path';\nimport bodyParser from 'body-parser'; // (optional) express has built-ins now\nimport http from 'http';\nimport cors from 'cors';\nimport { UtilsService } from '../services/utils.service';\nimport { StripeService } from '../services/stripeAdn';\n\nconst FRONTEND_ORIGIN = 'http://localhost:8100';\n\nconst corsOptions: cors.CorsOptions = {\n  origin: FRONTEND_ORIGIN,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'x-user-id'],\n  credentials: true,\n  optionsSuccessStatus: 204, // helps some legacy browsers with 204 vs 200\n};\n\nexport class WebServerComponent {\n  private app = express();\n  private router = express.Router();\n  private port!: number; // ✅ definite assignment (or initialize in constructor)\n\n  constructor(\n    private utilsSvc: UtilsService, \n    private stripeSvc: StripeService,\n  ) {}\n\n  async initWebServer(): Promise<void> {\n    // ✅ resolve port with fallback and number coercion\n    const rawPort = this.utilsSvc.serverPort ?? process.env.PORT ?? 3000;\n    this.port = Number(rawPort);\n    if (Number.isNaN(this.port)) this.port = 3000;\n\n    // Middlewares\n    this.setupMiddlewares();\n\n    // Routes\n    this.setRoutes();\n    this.app.use('/', this.router);\n\n    // Static\n    const cwd = process.cwd();\n    this.app.use(express.static(path.join(cwd, './dist')));\n    this.app.use(express.static(path.join(cwd, './dist2')));\n\n    // SPA catch-all (after static)\n    this.app.get('/*', (_req: Request, res: Response) => {\n      res.sendFile(path.join(cwd, './dist/index.html'));\n    });\n\n    // Start server\n    http.createServer(this.app).listen(this.port, () => {\n      console.log(`✅ HTTP server running on port ${this.port}`);\n    });\n  }\n\n  private setupMiddlewares(): void {\n    // ❌ remove the manual header block to avoid conflicts\n    // this.app.use((req, res, next) => { ... });\n\n    // ✅ proper CORS\n    this.app.use(cors(corsOptions));\n\n    // ✅ explicit preflight handling (optional but useful)\n    this.app.options('*', cors(corsOptions));\n\n    // Body parsers (you can use express.json() / express.urlencoded() instead)\n    this.app.use(bodyParser.json());\n    this.app.use(bodyParser.urlencoded({ extended: true }));\n    // Or:\n    // this.app.use(express.json());\n    // this.app.use(express.urlencoded({ extended: true }));\n  }\n\n  private setRoutes(): void {\n    this.utilsSvc.setRoutes(this.router);\n    this.stripeSvc.setRoutes(this.router);\n  }\n}\n"]}