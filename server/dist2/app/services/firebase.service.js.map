{"version":3,"sources":["../src/app/services/firebase.service.ts"],"names":[],"mappings":"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","file":"firebase.service.js","sourcesContent":["import { Injectable } from '@nestjs/common'; // if using NestJS\nimport { BehaviorSubject } from 'rxjs';\nimport * as admin from 'firebase-admin';   // âœ… Correct way\nimport * as fs from 'fs';\nimport { UtilsService } from './utils.service';\n\nexport enum OBJECTNAME {\n  wnLocations = 'backendlocations',\n  wnLocationtypes = 'backendlocationtypes',\n  wnUsers = 'backendusers',\n  wnMessages = 'backendmessages',\n  wnEquipments = 'backendequipments',\n  wnBookings = 'backendbookings',\n  wnFeedbacks = 'backendfeedbacks',\n}\n\n\nexport interface Users {\n    userId: string;\n    password: string;\n    firstname: string;\n    lastname: string;\n    country: string;\n    stripeAccountId: string;\n    stripeAccountStatus: boolean;\n    email: string;\n    phone: string;\n    role: string;\n    photos: string;\n    socialnetwork: string;\n    emailverified: boolean;\n    state: string;\n}\n\nexport interface Bookings {\n  bookingId: string;\n  hostId: string | undefined;\n  guestId: string | undefined;\n  locationId: string | undefined;\n  start: string;\n  end: string;\n  daybooking: boolean;\n  price: number,\n  status: string\n}\n\nexport interface Locations {\n  locationId: string;\n  title: string;\n  description: string;\n  photos: string[];\n  equipments: string[];\n  priceperhour: number;\n  priceperday: number;\n  address: string;\n  city: string;\n  lat: number;\n  lng: number;\n  type: string;\n  owner: string\n}\nexport interface Locationtypes {\n  locationtypeId: string;\n  title: string;\n  description: string;\n}\n\nexport interface Feedbacks {\n  feedbackId: string;\n  userId: string;\n  bookingId: string;\n  rate: number;\n  description: string;\n}\n\nexport interface Messages {\n  messageId: string;\n  sender: string;\n  receiver: string;\n  timestamp: number;\n  message: string;\n}\n\nexport interface Equipments {\n  equipmentId: string;\n  title: string;\n  description: string;\n}\n\nexport interface BookingData {\n  user_guest: string;\n  email_guest: string;\n  user_host: string;\n  email_host: string;\n  start_date: string;\n  end_date: string;\n  start_time: string;\n  end_time: string;\n  listing_title: string;\n  price: number;\n}\n\n@Injectable()\nexport class StoreDbService {\n  private db;\n  private bucket;\n  public auth;\n\n  public firebaseBSS: any = {};\n  public firebaseData: any = {};\n\n  constructor(private utilSvc: UtilsService) {\n  }\n\n  initFirebase() {\n    let currentDir = process.cwd();\n    const serviceAccount = JSON.parse(\n      fs.readFileSync(currentDir + '/dist2/config/adn-dev-4d05d-firebase-adminsdk-gzmds-f64bd43091.json', 'utf8')\n    );\n\n    admin.initializeApp({\n      credential: admin.credential.cert(serviceAccount),\n      databaseURL: this.utilSvc.databaseURL,\n      storageBucket: 'your-bucket.appspot.com',\n    });\n\n    this.db = admin.database();\n    this.auth = admin.auth();\n    this.bucket = admin.storage().bucket();\n  }\n\n  async getObject(refPath: string) {\n    const snapshot = await this.db.ref(refPath).once('value');\n    return snapshot.val();\n  }\n\n  async setObject(refPath: string, data: any) {\n    await this.db.ref(refPath).set(data);\n  }\n\n  async removeObject(refPath: string) {\n    await this.db.ref(refPath).remove();\n  }\n\n  subscribe(refPath: string, storeKey: string) {\n    if (!this.firebaseBSS[storeKey]) {\n      this.firebaseBSS[storeKey] = new BehaviorSubject(null);\n    }\n\n    this.db.ref(refPath).on('value', snapshot => {\n      const value = snapshot.val();\n      this.firebaseBSS[storeKey].next(value);\n    });\n  }\n\n  unsubscribe(refPath: string) {\n    this.db.ref(refPath).off();\n  }\n\n  async uploadFile(localFilePath: string, destinationPath: string) {\n    await this.bucket.upload(localFilePath, {\n      destination: destinationPath,\n      metadata: {\n        cacheControl: 'public,max-age=31536000',\n      },\n    });\n  }\n\n  async deleteFile(destinationPath: string) {\n    await this.bucket.file(destinationPath).delete();\n  }\n\n  createUser(email: string, password: string) {\n    return new Promise(async (resolve, reject) => {\n    try {\n      const userRecord = await admin.auth().createUser({\n        email,\n        password,\n      });\n      resolve(userRecord);\n    } catch (e) {\n      reject(e);\n    }\n    });\n  }\n\n  getUserIdByEmail(email: string) {\n    const maf = admin.auth();\n\n    return new Promise((resolve, reject) => {\n      maf.getUserByEmail(email.toLowerCase()).then(\n        (success) => {\n          const userid = success.uid;\n          resolve(userid);\n        },\n      error=> {\n        reject(error);\n      });\n    });\n  }\n\n\n}\n"]}