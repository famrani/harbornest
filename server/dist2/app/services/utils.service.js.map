{"version":3,"sources":["../src/app/services/utils.service.ts"],"names":[],"mappings":"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","file":"utils.service.js","sourcesContent":["export const TOKEN_URI = 'https://connect.stripe.com/oauth/token';\nexport const AUTHORIZE_URI = 'https://connect.stripe.com/oauth/authorize';\n\nexport const timer = ms => new Promise(res => setTimeout(res, ms));\n\ninterface Result {\n  answer: string;\n}\n\nconst { Vonage } = require('@vonage/server-sdk')\n\nconst vonage = new Vonage({\n  apiKey: \"cc59b4d3\",\n  apiSecret: \"yF2pFHuyZoJrHQGh\"\n})\n\n\nexport class UtilsService {\n  public backendConfig;\n\n  public adnStoreId = 0;\n\n  public backendUrl: string;\n  public serverUrl: string;\n  public serverUrlShort: string;\n  public serverPort: number;\n\n  public stripeClientId: string;\n  public stripeSecretKey: string;\n  public stripePublicKey: string;\n\n  public params;\n\n  public platformEnv = \"dev\";\n\n  public session;\n\n  public firebaseAdmin = require('firebase-admin');\n  public serviceAccountFile = \"\";\n  public databaseURL = \"\";\n  public mdb;\n  public config;\n  public stripeWebhookSecretKey;\n  public qs = require('querystring');\n  public backendFBstoreId = '1000';\n  public backendFBstoreId2 = '2001';\n\n\n  constructor() {\n  }\n\n  fileToArray(fileName, arr): Promise<any[]> {\n    return new Promise((resolve, reject) => {\n      let i = 0;\n      let currentDir = process.cwd();\n      try {\n        arr = require(currentDir + \"/\" + fileName);\n        resolve(arr);\n      }\n      catch (e) {\n        reject(e);\n      }\n    })\n  }\n\n  readConfig(configFile: string, env: string) {\n    return new Promise((resolve, reject) => {\n      this.fileToArray(configFile, this.backendConfig).then(\n        data => {\n          if (!env) {\n            env = data['application'].platform;\n            this.platformEnv = env;\n          }\n          this.backendUrl = data[env][\"backendUrl\"];\n          this.serverPort = data[env][\"serverPort\"];\n          this.serviceAccountFile = process.cwd() + \"/dist2/config/\" + data[env][\"serviceAccount\"];\n          this.databaseURL = data[env][\"firebaseMasterConfig\"][\"databaseURL\"];\n\n          this.stripeClientId = data[env][\"stripeConfig\"][\"CLIENT_ID\"];\n          this.stripePublicKey = data[env][\"stripeConfig\"][\"STRIPE_API_PUBLIC_KEY\"];\n\n\n          this.stripeSecretKey = process.env.STRIPE_SECRET_KEY;\n\n\n          resolve(data);\n        },\n        error => {\n          reject(error)\n        })\n    })\n  }\n\n  getParams() {\n    process.argv.forEach((val, index, array) => {\n      this.params = array.slice();\n    })\n    if (this.params.length > 2) {\n      switch (this.params[2]) {\n        case \"dev\":\n        case \"test\":\n        case \"demo\":\n        case \"prod\":\n          this.platformEnv = this.params[2];\n          break;\n        default:\n          this.platformEnv = undefined;\n      }\n    }\n    else {\n      this.platformEnv = undefined;\n    }\n  }\n\n  setRoutes(router) {\n    router.get('/utils/getenv', (req, res) => {\n      let status = 200;\n      let sessionData = req.session.kamli;\n      if (sessionData === undefined) {\n        sessionData = {};\n      }\n      res.json(sessionData).status(status)\n    });\n  }\n\n  async sendSMS(to, from, text) {\n      await vonage.sms.send({to, from, text})\n          .then(resp => { console.log('Message sent successfully'); console.log(resp); })\n          .catch(err => { console.log('There was an error sending the messages.'); console.error(err); });\n  }\n    \n  objectToArray(objectInput) {\n    let keyI;\n    let ArrayOutput = [];\n    try {\n      for (keyI in objectInput) {\n        objectInput[keyI][\"key\"] = keyI;\n        ArrayOutput.push(objectInput[keyI]);\n      }\n    }\n    catch (e) {\n      ArrayOutput = objectInput;\n    }\n    return ArrayOutput;\n  }\n\n}"]}