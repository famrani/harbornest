{"version":3,"sources":["../src/app/services/mailer.ts"],"names":[],"mappings":"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","file":"mailer.js","sourcesContent":["import sgMail from '@sendgrid/mail';\nimport nodemailer, { Transporter } from 'nodemailer';\nimport rateLimit from 'express-rate-limit';\nimport { verifyRecaptcha } from './recaptcha';\nimport { StoreDbService} from './firebase.service'\n\nexport type MailInput = {\n    to: string;\n    subject: string;\n    html: string;\n    replyTo?: string;\n};\n\nconst PROVIDER = process.env.MAIL_PROVIDER || 'sendgrid'; // 'sendgrid' | 'smtp'\nconst FROM = process.env.MAIL_FROM || 'no-reply@alldigitalnetwork.com';\n\nconst limiter = rateLimit({\n  windowMs: 60_000,\n  max: 20,\n  standardHeaders: true,\n  legacyHeaders: false,\n});\n\nconst WEB_BASE = process.env.WEB_BASE_URL || 'http://localhost:4200';\n\nfunction escapeHtml(s = '') {\n  return String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');\n}\nconst isEmail = (e?: string) => !!e && /^[^\\s@]+@[^\\s@]+\\.[^\\s@]{2,}$/.test(e);\nconst isStrong = (p?: string) => !!p && p.length >= 6;\n\nconst verificationEmail = (displayName: string | undefined, link: string) => `\n  <div style=\"font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial\">\n    <h2>Confirm your email</h2>\n    <p>Hello ${displayName ? escapeHtml(displayName) : 'there'},</p>\n    <p>Thanks for creating a HarborNest account. Please confirm your email to continue.</p>\n    <p>\n      <a style=\"background:#111;color:#fff;padding:.6rem 1rem;border-radius:999px;text-decoration:none\"\n         href=\"${link}\" target=\"_blank\" rel=\"noopener\">Confirm my email</a>\n    </p>\n    <p>If the button doesnâ€™t work, copy this link:</p>\n    <p><a href=\"${link}\">${link}</a></p>\n  </div>\n`;\n\ntype SignupBody = {\n  email?: string;\n  password?: string;\n  displayName?: string;\n  recaptchaToken?: string;\n};\n\n\nexport class MailService {\n\n      constructor(private storeDbSvc: StoreDbService) {\n      }\n    \n\n    private transporter: Transporter | undefined; // lazy-init for SMTP\n\n    async sendMail({ to, subject, html, replyTo }: MailInput): Promise<void> {\n        if (PROVIDER === 'sendgrid') {\n            const apiKey = process.env.SENDGRID_API_KEY;\n            if (!apiKey) throw new Error('SENDGRID_API_KEY not set');\n            sgMail.setApiKey(apiKey);\n            await sgMail.send({ to, from: FROM, subject, html, replyTo });\n            return;\n        }\n\n        // SMTP fallback\n        if (!this.transporter) {\n            const host = process.env.SMTP_HOST;\n            const port = Number(process.env.SMTP_PORT || 465);\n            const user = process.env.SMTP_USER;\n            const pass = process.env.SMTP_PASS;\n            if (!host || !user || !pass) throw new Error('SMTP env vars missing');\n\n            this.transporter = nodemailer.createTransport({\n                host,\n                port,\n                secure: port === 465, // true for 465\n                auth: { user, pass },\n            });\n        }\n\n        await this.transporter.sendMail({ to, from: FROM, subject, html, replyTo });\n    }\n\n\n    setRoutes(router) {\n        router.post('/signup', limiter, async (req, res) => {\n            try {\n                const { email, password, displayName, recaptchaToken } = req.body as SignupBody;\n                if (!isEmail(email)) return res.status(400).json({ message: 'Invalid email' });\n                if (!isStrong(password)) return res.status(400).json({ message: 'Password too short (min 6)' });\n\n                // Optional reCAPTCHA\n                const recap = await verifyRecaptcha(recaptchaToken);\n                const minScore = Number(process.env.RECAPTCHA_MIN_SCORE || 0.3);\n                if (!recap.ok || recap.score < minScore) {\n                    return res.status(400).json({ message: 'reCAPTCHA verification failed' });\n                }\n\n                // Create user (email not verified yet)\n                const user = await this.storeDbSvc.auth.createUser({\n                    email,\n                    password,\n                    displayName: displayName || undefined,\n                    emailVerified: false,\n                    disabled: false,\n                });\n\n                // Generate verification link\n                const link = await this.storeDbSvc.auth.generateEmailVerificationLink(email, {\n                    url: `${WEB_BASE}/verify-email`,\n                    handleCodeInApp: true,\n                });\n\n                // Email it\n                await this.sendMail({\n                    to: email,\n                    subject: 'Confirm your HarborNest email',\n                    html: verificationEmail(displayName, link),\n                    replyTo: email,\n                });\n\n                return res.json({ ok: true, uid: user.uid });\n            } catch (err: any) {\n                if (err?.code === 'auth/email-already-exists') {\n                    return res.status(409).json({ message: 'Email already in use' });\n                }\n                // eslint-disable-next-line no-console\n                console.error('signup error', err);\n                return res.status(500).json({ message: 'Sign-up failed' });\n            }\n        });\n\n        router.post('/resend-verification', limiter, async (req, res) => {\n            try {\n                const { email } = req.body as { email?: string };\n                if (!isEmail(email)) return res.status(400).json({ message: 'Invalid email' });\n\n                const user = await this.storeDbSvc.auth.getUserByEmail(email);\n                if (user.emailVerified) return res.json({ ok: true, alreadyVerified: true });\n\n                const link = await this.storeDbSvc.auth.generateEmailVerificationLink(email, {\n                    url: `${WEB_BASE}/verify-email`,\n                    handleCodeInApp: true,\n                });\n\n                await this.sendMail({\n                    to: email,\n                    subject: 'Confirm your HarborNest email',\n                    html: verificationEmail(user.displayName, link),\n                    replyTo: email,\n                });\n\n                return res.json({ ok: true });\n            } catch (err: any) {\n                if (err?.code === 'auth/user-not-found') {\n                    return res.status(404).json({ message: 'User not found' });\n                }\n                console.error('resend error', err);\n                return res.status(500).json({ message: 'Could not resend verification' });\n            }\n        });\n    }\n\n}"]}