{"version":3,"sources":["../src/app/services/stripeAdn.ts"],"names":[],"mappings":"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","file":"stripeAdn.js","sourcesContent":["import Stripe from 'stripe';\nimport { Request, Response } from 'express';\nimport * as dotenv from 'dotenv';\nimport { v4 as uuidv4 } from 'uuid';\nimport * as admin from 'firebase-admin';\nimport { OBJECTNAME, BookingData } from './firebase.service';\n\ndotenv.config();\n\nexport class StripeService {\n    private stripe: Stripe;\n\n    constructor() {\n        let secretKey = process.env.STRIPE_SECRET_KEY as string;\n        this.stripe = new Stripe(secretKey, {\n            apiVersion: '2025-08-27.basil',\n        });\n    }\n\n    // Customers\n\n    async createCustomer(req: Request, res: Response) {\n        try {\n            const { email, name, phone, metadata, accountId } = req.body;\n\n            const params: Stripe.CustomerCreateParams = {\n                email,\n                name,\n                phone,\n                metadata,\n            };\n\n            const customer = accountId\n                ? await this.stripe.customers.create(params, { stripeAccount: accountId })\n                : await this.stripe.customers.create(params);\n\n            res.json(customer);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async retrieveCustomer(req: Request, res: Response) {\n        try {\n            const { customerId, accountId } = req.query;\n            const customer = accountId\n                ? await this.stripe.customers.retrieve(customerId as string, { stripeAccount: accountId as string })\n                : await this.stripe.customers.retrieve(customerId as string);\n\n            res.json(customer);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async updateCustomer(req: Request, res: Response) {\n        try {\n            const { customerId, updateFields, accountId } = req.body;\n\n            const customer = accountId\n                ? await this.stripe.customers.update(customerId, updateFields, { stripeAccount: accountId })\n                : await this.stripe.customers.update(customerId, updateFields);\n\n            res.json(customer);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async deleteCustomer(req: Request, res: Response) {\n        try {\n            const { customerId, accountId } = req.body;\n\n            const deleted = accountId\n                ? await this.stripe.customers.del(customerId, { stripeAccount: accountId })\n                : await this.stripe.customers.del(customerId);\n\n            res.json(deleted);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // Payment Intents\n\n    async createPaymentIntent(req: Request, res: Response) {\n        let bookingdata = {} as BookingData;\n        try {\n            const {\n                amount,\n                currency,\n                customerId,\n                applicationFee,\n                accountId,\n                user_guest,\n                email_guest,\n                user_host,\n                email_host,\n                start_date,\n                end_date,\n                start_time,\n                end_time,\n                listing_title,\n            } = req.body;\n\n            bookingdata.user_guest = user_guest;\n            bookingdata.email_guest = email_guest;\n            bookingdata.user_host = user_host;\n            bookingdata.email_host = email_host;\n            bookingdata.start_date = start_date;\n            bookingdata.end_date = end_date;\n            bookingdata.start_time = start_time;\n            bookingdata.end_time = end_time;\n            bookingdata.listing_title = listing_title;\n            bookingdata.price = amount / 100;\n\n            const params: Stripe.PaymentIntentCreateParams = {\n                amount,\n                currency,\n                customer: customerId,\n                payment_method_types: ['card'],\n            };\n\n            if (accountId && applicationFee) {\n                params.transfer_data = { destination: accountId };\n                params.application_fee_amount = applicationFee;\n            }\n\n            const paymentIntent = await this.stripe.paymentIntents.create(params);\n\n            res.json(paymentIntent);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async confirmPaymentIntent(req: Request, res: Response) {\n        try {\n            const { paymentIntentId } = req.body;\n\n            const paymentIntent = await this.stripe.paymentIntents.confirm(paymentIntentId);\n            res.json(paymentIntent);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async cancelPaymentIntent(req: Request, res: Response) {\n        try {\n            const { paymentIntentId } = req.body;\n\n            const paymentIntent = await this.stripe.paymentIntents.cancel(paymentIntentId);\n            res.json(paymentIntent);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // Refunds\n\n    async createRefund(req: Request, res: Response) {\n        try {\n            const { paymentIntentId, amount, accountId } = req.body;\n\n            const params: Stripe.RefundCreateParams = {\n                payment_intent: paymentIntentId,\n                amount,\n            };\n\n            const refund = accountId\n                ? await this.stripe.refunds.create(params, { stripeAccount: accountId })\n                : await this.stripe.refunds.create(params);\n\n            res.json(refund);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async createSetupIntent(req: Request, res: Response) {\n        try {\n            const { customerId } = req.body;\n\n            const setupIntent = await this.stripe.setupIntents.create({\n                customer: customerId,\n                payment_method_types: ['card'],\n            });\n\n            res.json(setupIntent);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async confirmSetupIntent(req: Request, res: Response) {\n        try {\n            const { setupIntentId } = req.body;\n\n            const setupIntent = await this.stripe.setupIntents.confirm(setupIntentId);\n            res.json(setupIntent);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // Webhook\n\n    async handleWebhook(req: Request, res: Response, endpointSecret: string) {\n        try {\n            const sig = req.headers['stripe-signature'];\n            const event = this.stripe.webhooks.constructEvent(req.body, sig as string, endpointSecret);\n\n            console.log('Webhook event received:', event.type);\n\n            res.status(200).send({ received: true });\n        } catch (err: any) {\n            console.error('Webhook Error:', err.message);\n            res.status(400).send(`Webhook Error: ${err.message}`);\n        }\n    }\n\n    // --- Add to your StripeService class ---\n\n    // Create a Connected Standard Account\n    async createStandardAccount(req: Request, res: Response) {\n        try {\n            const { email, country = 'FR' } = req.body;\n\n            const account = await this.stripe.accounts.create({\n                type: 'standard',\n                country,\n                email,\n                business_type: 'individual', // or 'company'\n            });\n\n            res.json(account);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // Generate an Account Link for Onboarding\n    async createStandardAccountLink(req: Request, res: Response) {\n        try {\n            const { accountId, refreshUrl, returnUrl } = req.body;\n\n            const accountLink = await this.stripe.accountLinks.create({\n                account: accountId,\n                refresh_url: refreshUrl,\n                return_url: returnUrl,\n                type: 'account_onboarding',\n            });\n\n            res.json(accountLink);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // Retrieve a Connected Account\n    async retrieveAccount(req: Request, res: Response) {\n        try {\n            const { accountId } = req.query;\n\n            const account = await this.stripe.accounts.retrieve(accountId as string);\n\n            res.json(account);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // ✅ Create a Connected Express Account\n    async createExpressAccount(req: Request, res: Response) {\n        try {\n            const { email, country = 'FR' } = req.body;\n\n            const account = await this.stripe.accounts.create({\n                type: 'express', // ✅ EXPRESS account\n                country,\n                email,\n                capabilities: {\n                    card_payments: { requested: true },\n                    transfers: { requested: true },\n                },\n                business_type: 'individual', // or 'company' if you need\n            });\n\n            const state = uuidv4();\n\n            res.json(account);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // Generate an Account Link for Express Onboarding\n    async createExpressAccountLink(req: Request, res: Response) {\n        try {\n            const { accountId, refreshUrl, returnUrl } = req.body;\n\n            const accountLink = await this.stripe.accountLinks.create({\n                account: accountId,\n                refresh_url: refreshUrl,\n                return_url: returnUrl,\n                type: 'account_onboarding',\n            });\n\n            res.json(accountLink);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n\n    // OPTIONAL - Manual Transfer to Connected Account\n    async createTransfer(req: Request, res: Response) {\n        try {\n            const { amount, currency, destinationAccountId } = req.body;\n\n            const transfer = await this.stripe.transfers.create({\n                amount,\n                currency,\n                destination: destinationAccountId,\n            });\n\n            res.json(transfer);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // OPTIONAL - List PaymentIntents\n    async listPaymentIntents(req: Request, res: Response) {\n        try {\n            const { limit = 10 } = req.query;\n\n            const paymentIntents = await this.stripe.paymentIntents.list({\n                limit: Number(limit),\n            });\n\n            res.json(paymentIntents);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    // OPTIONAL - List Charges\n    async listCharges(req: Request, res: Response) {\n        console.log('listCharges');\n        try {\n            const { limit = 10 } = req.query;\n\n            const charges = await this.stripe.charges.list({\n                limit: Number(limit),\n            });\n\n            res.json(charges);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async listCustomAccounts(req: Request, res: Response) {\n        try {\n            const { limit = 100 } = req.query;\n\n            const accounts = await this.stripe.accounts.list({\n                limit: Number(limit),\n            });\n            const customAccounts = accounts.data.filter(acc => acc.type === 'custom' || acc.type === 'express');\n            res.json(customAccounts);\n        } catch (error: any) {\n            res.status(400).json({ error: error.message });\n        }\n    }\n\n    async deleteStripeAccount(req: Request, res: Response) {\n        try {\n            const { stripeAccountId } = req.query;\n            const deleted = await this.stripe.accounts.del(String(stripeAccountId));\n            console.log(`Deleted account ${stripeAccountId}:`, deleted);\n            res.json(deleted);\n        } catch (err: any) {\n            res.status(400).json({ error: err.message });\n        }\n    }\n\n    async getAccountStatus(req: Request, res: Response) {\n        try {\n            const { accountId } = req.query;\n            const snap = await admin.database().ref(`/${OBJECTNAME.wnUsers}/${accountId}/stripeAccountId`).once('value');\n            const stripeAccountId = snap.val();\n\n            if (!stripeAccountId) return res.json({ connected: false });\n\n            const account = await this.stripe.accounts.retrieve(stripeAccountId);\n            res.json({\n                connected: true,\n                stripeAccountId: stripeAccountId,\n                status: account.details_submitted ? 'Complete' : 'Incomplete',\n            });\n        } catch (err: any) {\n            res.status(500).json({ error: err.message });\n        }\n    }\n\n    async disconnectStripeAccount(req: Request, res: Response) {\n        try {\n\n            const { accountId } = req.query;\n            const snap = await admin.database().ref(`/${OBJECTNAME.wnUsers}/${accountId}/stripeAccountId`).once('value');\n\n            await admin.database().ref(`/${OBJECTNAME.wnUsers}/${accountId}/stripeAccountId`).remove();\n            res.json({ success: true });\n        } catch (err: any) {\n            res.status(500).json({ error: err.message });\n        }\n    }\n\n    async createDashboardLink(req: Request, res: Response) {\n        try {\n            const { stripeAccountId } = req.body;\n            const link = await this.stripe.accounts.createLoginLink(stripeAccountId);\n            res.json({ url: link.url });\n        } catch (err: any) {\n            res.status(500).json({ error: err.message });\n        }\n    }\n\n    async createRemediationLink(req: Request, res: Response) {\n        console.log('createRemediationLink');\n        try {\n            const { stripeAccountId, refresh_url, return_url } = req.body;\n            const accountLink = await this.stripe.accountLinks.create({\n                account: stripeAccountId,\n                refresh_url: `${refresh_url}`,\n                return_url: `${return_url}`,\n                type: 'account_onboarding',\n            });\n            res.json({ url: accountLink.url });\n        } catch (err: any) {\n            res.status(500).json({ error: err.message });\n        }\n    }\n\n\n    setRoutes(stripeRouter: any) {\n        // --- Customers ---\n        stripeRouter.post('/stripe/customer', (req: Request, res: Response) => this.createCustomer(req, res));\n        stripeRouter.get('/stripe/customer/:customerId', (req: Request, res: Response) => this.retrieveCustomer(req, res));\n        stripeRouter.put('/stripe/customer/:customerId', (req: Request, res: Response) => this.updateCustomer(req, res));\n        stripeRouter.delete('/stripe/customer/:customerId', (req: Request, res: Response) => this.deleteCustomer(req, res));\n\n        // --- Payment Intents ---\n        stripeRouter.post('/stripe/payment-intent', (req: Request, res: Response) => this.createPaymentIntent(req, res));\n        stripeRouter.post('/stripe/payment-intent/:paymentIntentId/confirm', (req: Request, res: Response) => this.confirmPaymentIntent(req, res));\n        stripeRouter.post('/stripe/payment-intent/:paymentIntentId/cancel', (req: Request, res: Response) => this.cancelPaymentIntent(req, res));\n\n        // --- Setup Intents ---\n        stripeRouter.post('/stripe/setup-intent', (req: Request, res: Response) => this.createSetupIntent(req, res));\n        stripeRouter.post('/stripe/setup-intent/:setupIntentId/confirm', (req: Request, res: Response) => this.confirmSetupIntent(req, res));\n\n        // --- Refunds ---\n        stripeRouter.post('/stripe/refund', (req: Request, res: Response) => this.createRefund(req, res));\n\n        // --- Webhooks ---\n        stripeRouter.post('/stripe/webhook', (req: Request, res: Response, endpointSecret: string) => this.handleWebhook(req, res, endpointSecret));\n\n        stripeRouter.post('/stripe/standardaccount', (req: Request, res: Response) => this.createStandardAccount(req, res));               // Create Stripe Standard Account\n        stripeRouter.post('/stripe/expressaccount', (req: Request, res: Response) => this.createExpressAccount(req, res));               // Create Stripe Express Account\n        stripeRouter.post('/stripe/standardaccount-link', (req: Request, res: Response) => this.createStandardAccountLink(req, res));                    // Create Stripe Express Account\n        stripeRouter.post('/stripe/expressaccount-link', (req: Request, res: Response) => this.createExpressAccountLink(req, res));        // Create Account Onboarding Link\n        stripeRouter.get('/stripe/account', (req: Request, res: Response) => this.retrieveAccount(req, res));                // Get Account Details\n\n        // Optional: Manual Transfers\n        stripeRouter.post('/stripe/transfer', (req: Request, res: Response) => this.createTransfer(req, res));\n\n        // Optional: Admin listing\n        stripeRouter.get('/stripe/payment-intents', (req: Request, res: Response) => this.listPaymentIntents(req, res));\n        stripeRouter.get('/stripe/charges', (req: Request, res: Response) => this.listCharges(req, res));\n        stripeRouter.get('/stripe/listaccount', (req: Request, res: Response) => this.listCustomAccounts(req, res));\n        stripeRouter.get('/stripe/deleteaccount', (req: Request, res: Response) => this.deleteStripeAccount(req, res));\n\n        stripeRouter.get('/stripe/account-status', (req: Request, res: Response) => this.getAccountStatus(req, res));\n        stripeRouter.post('/stripe/disconnect-account', (req: Request, res: Response) => this.disconnectStripeAccount(req, res));\n        stripeRouter.post('/stripe/dashboard-link', (req: Request, res: Response) => this.createDashboardLink(req, res));\n        stripeRouter.post('/stripe/remediation-link', (req: Request, res: Response) => this.createRemediationLink(req, res));\n    }\n\n}\n"]}